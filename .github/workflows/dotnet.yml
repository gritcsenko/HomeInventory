name: CI Build

on:
  push:
    branches: [ "main", "feature/*" ]
  pull_request:
    branches: [ "main" ]
env:
  CI: true

jobs:
  build:
    name: Build and Test .NET
    runs-on: ubuntu-latest

    steps:
    - name: Checkout files
      uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 6.x
        include-prerelease: true
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.nuget/packages
        # Look to see if there is a cache hit for the corresponding requirements file
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget
    - name: Restore dependencies
      run: dotnet restore ./src/HomeInventory --verbosity normal
    - name: Build
      run: dotnet build ./src/HomeInventory --no-restore --configuration Release --self-contained false --verbosity normal
    - name: Test
      run: dotnet test ./src/HomeInventory --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
    - name: Copy Coverage To Predictable Location
      run: cp coverage/**/coverage.cobertura.xml coverage.cobertura.xml
    - name: Code Coverage Summary Report
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: coverage.cobertura.xml
        badge: true
        fail_below_min: true
        format: markdown
        hide_branch_rate: false
        hide_complexity: true
        indicators: true
        output: both
        thresholds: '60 80'
    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: code-coverage-results.md
    - name: Upload dotnet test results
      uses: actions/upload-artifact@v3
      with:
        name: dotnet-results
        path: TestResults
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}